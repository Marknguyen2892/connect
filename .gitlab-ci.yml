image: registry.gitlab.com/satoshilabs/trezor/trezor-user-env/trezor-user-env:latest

stages:
  - prebuild
  - build
  - test
  - deploy

before_script:
  - nix-shell --run "yarn"

flow lint:
  stage: prebuild
  when: manual
  script:
    - nix-shell --run "yarn flow"
    - nix-shell --run "yarn lint"
    - nix-shell --run "yarn test:unit"

build:
  stage: build
  script:
    - nix-shell --run "make build-connect"
  artifacts:
    expire_in: 1 week
    paths:
      - build

deploy review:
  stage: deploy
  variables:
    GIT_STRATEGY: none
  when: manual
  needs: ["build"]
  environment:
    name: $CI_BUILD_REF_NAME
    url: $BASE_REVIEW_URL/$CI_BUILD_REF_NAME
  before_script: []
  script:
    - echo "Deploy a review app"
    - '[ -z "${DEPLOY_BASE_DIR}" ] && echo "Deploy base dir cannot be empty" && exit 255'
    - env
    - mkdir -p "${DEPLOY_BASE_DIR}/${CI_BUILD_REF_NAME}"
    - echo "Copy dev build to web server ${DEPLOY_BASE_DIR}/${CI_BUILD_REF_NAME}..."
    - rsync --delete -va build/ "${DEPLOY_BASE_DIR}/${CI_BUILD_REF_NAME}/"
  only:
    - branches
  tags:
    - deploy

.test:
  stage: test
  needs: ["build"]
  variables:
    SDL_VIDEODRIVER: "dummy"
    FIRMWARE_VERSION: 2.3.2
  before_script:
    - nix-shell --run "yarn"
    - "echo Firmware version: $FIRMWARE_VERSION"

test common:
  extends: .test
  script:
    - cd /trezor-user-env
    - ls
    - nix-shell controller/shell.nix --run 'python controller/main.py' &  # TODO: would be better to run automatically in docker
    - cd -
    - nix-shell --run "./tests/run-internal.sh -f $FIRMWARE_VERSION -i applySettings"

#test btc sign:
#  extends: .test
#  script:
#    - ./tests/run-internal.sh -f $FIRMWARE_VERSION -i signTransaction
#
#test btc others:
#  extends: .test
#  script:
#    - ./tests/run-internal.sh -f $FIRMWARE_VERSION -i getAccountInfo,getAddress,getPublicKey,signMessage,verifyMessage
#
#test btc stellar:
#  extends: .test
#  script:
#    - ./tests/run-internal.sh -f $FIRMWARE_VERSION -i stellarGetAddress,stellarSignTransaction
#
#test btc cardano:
#  extends: .test
#  script:
#    - ./tests/run-internal.sh -f $FIRMWARE_VERSION -i cardanoGetAddress,cardanoGetPublicKey,cardanoSignTransaction
#
#test btc eos:
#  extends: .test
#  script:
#    - ./tests/run-internal.sh -f $FIRMWARE_VERSION -i eosGetPublicKey,eosSignTransaction
#
#test btc eth:
#  extends: .test
#  script:
#    - ./tests/run-internal.sh -f $FIRMWARE_VERSION -i ethereumGetAddress,ethereumGetPublicKey,ethereumSignMessage,ethereumSignTransaction,ethereumVerifyMessage
#
#test btc nem:
#  extends: .test
#  script:
#    - ./tests/run-internal.sh -f $FIRMWARE_VERSION -i nemGetAddress,nemSignTransaction
#
#test btc ripple:
#  extends: .test
#  script:
#    - ./tests/run-internal.sh -f $FIRMWARE_VERSION -i rippleGetAddress,rippleSignTransaction
#
#test btc tezos:
#  extends: .test
#  script:
#    - ./tests/run-internal.sh -f $FIRMWARE_VERSION -i tezosGetAddress,tezosGetPublicKey
#
#test btc binance:
#  extends: .test
#  script:
#    - ./tests/run-internal.sh -f $FIRMWARE_VERSION -i binanceSignTransaction
